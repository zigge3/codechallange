#!/usr/bin/env node

/**
 * This copies the current .eslintrc to a specific exercise folder or to all
 * of them if an exercise folder is not given. Merges the version field in case
 * it's set.
 *
 * Usage:
 *
 * ./bin/tools/copy-eslint-config <exercise>
 */

// @ts-check

const fs = require('fs');
const path = require('path');

const ROOT_PATH = path.join(__dirname, '..', '..');
const BABEL_CONFIG_PATH = path.join(ROOT_PATH, '.eslintrc');
const EXERCISE = process.argv.slice(2).find(arg => !arg.startsWith('-'));

process.stdout.write(`=> copy eslint config for ${EXERCISE || 'all exercises'}\n`);


function execute(exercise) {
  const EXERCISE_DIR = path.join(ROOT_PATH, 'exercises', exercise);
  const destination = path.join(EXERCISE_DIR, path.basename(BABEL_CONFIG_PATH));

  fs.copyFile(BABEL_CONFIG_PATH, destination, (err) => {
    if (err) {
      process.stderr.write(`=> error for ${exercise}: ${err.message}\n`);
    } else {
      process.stdout.write(`=> copied eslint config to ${exercise}\n`);
    }
  });

}

if (!EXERCISE) {
  process.stdin.resume();
  process.stdout.write('?> are you sure? [Y/n]\n');
  process.stdin.once('data', (data) => {
    process.stdin.pause();

    const input = data.toString().trim();

    if (!/^(?:\s?|y|yes)$/i.test(input)) {
      process.stdout.write('=> ok bye\n');
      process.exit(0);
      return;
    }

    fs.readdir(path.join(ROOT_PATH, 'exercises'), (err, exercises) => {
      if (err) {
        process.stderr.write(err.message);
        process.exit(-1);
      }

      exercises.forEach(execute);
    });
  });
} else {
  execute(EXERCISE);
}
