#!/usr/bin/env node

/**
 * This copies the current package.json to a specific exercise folder or to all
 * of them if an exercise folder is not given. Merges the version field in case
 * it's set.
 *
 * Usage:
 *
 * ./bin/tools/copy-package-json <exercise>
 */

// @ts-check

const fs = require('fs');
const path = require('path');

const ROOT_PATH = path.join(__dirname, '..', '..');
const EXERCISE = process.argv.slice(2).find(arg => !arg.startsWith('-'));

process.stdout.write(`=> copy package.json for ${EXERCISE || 'all exercises'}\n`);

function formatAsJson(data) {
  return JSON.stringify(data, null, 2);
}

// @ts-ignore
const BASE_PACKAGE_JSON = require('../../package.json');

function execute(exercise) {
  const EXERCISE_DIR = path.join(ROOT_PATH, 'exercises', exercise);
  const EXERCISE_PACKAGE_JSON = path.join(EXERCISE_DIR, 'package.json');

  fs.readFile(EXERCISE_PACKAGE_JSON, (err, data) => {
    const current = JSON.parse(err ? JSON.stringify(BASE_PACKAGE_JSON) : data.toString());
    const mergedPackage = formatAsJson(
      {
        ...BASE_PACKAGE_JSON,
        version: current.version,
      },
    );

    fs.writeFile(EXERCISE_PACKAGE_JSON, mergedPackage, (innerErr) => {
      if (innerErr) {
        process.stderr.write(`=> error for ${exercise}: ${err.message}\n`);
      } else {
        process.stdout.write(`=> copied package.json to ${exercise}\n`);
      }
    });
  });
}

if (!EXERCISE) {
  process.stdin.resume();
  process.stdout.write('?> are you sure? [Y/n]\n');
  process.stdin.once('data', (data) => {
    process.stdin.pause();

    const input = data.toString().trim();

    if (!/^(?:\s?|y|yes)$/i.test(input)) {
      process.stdout.write('=> ok bye\n');
      process.exit(0);
      return;
    }

    fs.readdir(path.join(ROOT_PATH, 'exercises'), (err, exercises) => {
      if (err) {
        process.stderr.write(err.message);
        process.exit(-1);
      }

      exercises.forEach(execute);
    });
  });
} else {
  execute(EXERCISE);
}

// Sanity check matching whitespace
fs.writeFile(path.join(ROOT_PATH, 'package.json'), formatAsJson(BASE_PACKAGE_JSON), () => {});
